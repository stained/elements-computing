/**
 * Implements level sprite drawing routines
 */
class LevelSprite
{
	// position of sprite
	field int x;
	field int y;

	// types:
	// 0 - empty, no sprite
	// 1 - concrete
	// 2 - steel
	// 101 - player 1 icon
	// 102 - player 2 icon
	field int type;

	// calculated screen memory offset
	field int offset;

	constructor LevelSprite new(int xOffset, int yOffset, int spriteType) 
	{
		let x = xOffset;
		let y = yOffset;
		let offset = x + (y * 512);
		let type = spriteType;
		return this;
	}

	/**
	 * Create a new Steel Wall Level Sprite
	 * @param int xOffset
	 * @param int yOffset
	 */
	function LevelSprite newSteelWall(int xOffset, int yOffset)
	{
		return LevelSprite.new(xOffset, yOffset, 2);
	}

	/**
	 * Create a new Concrete Wall Level Sprite
	 * @param int xOffset
	 * @param int yOffset
	 */
	function LevelSprite newConcreteWall(int xOffset, int yOffset)
	{
		return LevelSprite.new(xOffset, yOffset, 1);
	}

	/**
	 * Create new player icon sprite
	 */
	function LevelSprite newPlayerIcon(int xOffset, int yOffset, int player)
	{
		return LevelSprite.new(xOffset, yOffset, 100 + player);
	}

	/**
	 * Draw the actual sprite, based on type
	 */
	method void draw()
	{
		if (type = 2) {
			do drawSteelWall(offset);
			return;
		}

		if (type = 1) {
			do drawConcreteWall(offset);
			return;
		}

		if (type = 101) {
			do drawPlayer1Icon(offset);
			return;
		}

		if (type = 102) {
			do drawPlayer2Icon(offset);
			return;
		}

		return;
	}

	/**
	 * Remove the sprite from the screen
	 */ 
	method void remove()
	{
		do LevelSprite.clear(offset);
		return;
	}

	/**
	 * return type of level sprite
	 */
	method int getType()
	{
		return type;
	}

	method void drawSteelWall(int location) 
	{
		var int memAddress; 
		let memAddress = 16384+location;
		do Memory.poke(memAddress+0, -1);
		do Memory.poke(memAddress+32, -1);
		do Memory.poke(memAddress+64, -1);
		do Memory.poke(memAddress+96, -1);
		do Memory.poke(memAddress+128, -1);
		do Memory.poke(memAddress+160, -1);
		do Memory.poke(memAddress+192, -1);
		do Memory.poke(memAddress+224, -1);
		do Memory.poke(memAddress+256, -1);
		do Memory.poke(memAddress+288, -1);
		do Memory.poke(memAddress+320, -1);
		do Memory.poke(memAddress+352, -1);
		do Memory.poke(memAddress+384, -1);
		do Memory.poke(memAddress+416, -1);
		do Memory.poke(memAddress+448, -1);
		do Memory.poke(memAddress+480, -1);
		return;
	}

	method void drawConcreteWall(int location) 
	{
		var int memAddress; 
		let memAddress = 16384+location;
		do Memory.poke(memAddress+0, 32766);
		do Memory.poke(memAddress+32, -32767);
		do Memory.poke(memAddress+64, -32767);
		do Memory.poke(memAddress+96, -32767);
		do Memory.poke(memAddress+128, -32767);
		do Memory.poke(memAddress+160, -32767);
		do Memory.poke(memAddress+192, -32767);
		do Memory.poke(memAddress+224, -32767);
		do Memory.poke(memAddress+256, -32767);
		do Memory.poke(memAddress+288, -32767);
		do Memory.poke(memAddress+320, -32767);
		do Memory.poke(memAddress+352, -32767);
		do Memory.poke(memAddress+384, -32767);
		do Memory.poke(memAddress+416, -32767);
		do Memory.poke(memAddress+448, -32767);
		do Memory.poke(memAddress+480, 32766);
		return;
	}	

	function void clear(int location) {
		var int memAddress; 
		let memAddress = 16384+location;
		do Memory.poke(memAddress+0, 0);
		do Memory.poke(memAddress+32, 0);
		do Memory.poke(memAddress+64, 0);
		do Memory.poke(memAddress+96, 0);
		do Memory.poke(memAddress+128, 0);
		do Memory.poke(memAddress+160, 0);
		do Memory.poke(memAddress+192, 0);
		do Memory.poke(memAddress+224, 0);
		do Memory.poke(memAddress+256, 0);
		do Memory.poke(memAddress+288, 0);
		do Memory.poke(memAddress+320, 0);
		do Memory.poke(memAddress+352, 0);
		do Memory.poke(memAddress+384, 0);
		do Memory.poke(memAddress+416, 0);
		do Memory.poke(memAddress+448, 0);
		do Memory.poke(memAddress+480, 0);
		return;
	}	

	function void invertColor(int location)
	{
		var int memAddress; 
		let memAddress = 16384+location;
		do Memory.poke(memAddress+0, ~(Memory.peek(memAddress+0)));
		do Memory.poke(memAddress+32, ~(Memory.peek(memAddress+32)));
		do Memory.poke(memAddress+64, ~(Memory.peek(memAddress+64)));
		do Memory.poke(memAddress+96, ~(Memory.peek(memAddress+96)));
		do Memory.poke(memAddress+128, ~(Memory.peek(memAddress+128)));
		do Memory.poke(memAddress+160, ~(Memory.peek(memAddress+160)));
		do Memory.poke(memAddress+192, ~(Memory.peek(memAddress+192)));
		do Memory.poke(memAddress+224, ~(Memory.peek(memAddress+224)));
		do Memory.poke(memAddress+256, ~(Memory.peek(memAddress+256)));
		do Memory.poke(memAddress+288, ~(Memory.peek(memAddress+288)));
		do Memory.poke(memAddress+320, ~(Memory.peek(memAddress+320)));
		do Memory.poke(memAddress+352, ~(Memory.peek(memAddress+352)));
		do Memory.poke(memAddress+384, ~(Memory.peek(memAddress+384)));
		do Memory.poke(memAddress+416, ~(Memory.peek(memAddress+416)));
		do Memory.poke(memAddress+448, ~(Memory.peek(memAddress+448)));
		do Memory.poke(memAddress+480, ~(Memory.peek(memAddress+480)));
		return;
	}

	method void drawPlayer1Icon(int location) {
		var int memAddress; 
		// offset by 256 to align with score text
		let memAddress = 16384+256+location;

		do Memory.poke(memAddress+0, 0);
		do Memory.poke(memAddress+32, 960);
		do Memory.poke(memAddress+64, 384);
		do Memory.poke(memAddress+96, 384);
		do Memory.poke(memAddress+128, 384);
		do Memory.poke(memAddress+160, 31134);
		do Memory.poke(memAddress+192, 22938);
		do Memory.poke(memAddress+224, 28662);
		do Memory.poke(memAddress+256, 24570);
		do Memory.poke(memAddress+288, 28662);
		do Memory.poke(memAddress+320, 24570);
		do Memory.poke(memAddress+352, 28662);
		do Memory.poke(memAddress+384, 22938);
		do Memory.poke(memAddress+416, 26646);
		do Memory.poke(memAddress+448, 30750);
		do Memory.poke(memAddress+480, 0);

		return;
	}

	method void drawPlayer2Icon(int location) {
		var int memAddress; 
		// offset by 256 to align with score text
		let memAddress = 16384+256+location;

		do Memory.poke(memAddress+0, 0);
		do Memory.poke(memAddress+32, 384);
		do Memory.poke(memAddress+64, 384);
		do Memory.poke(memAddress+96, 384);
		do Memory.poke(memAddress+128, 384);
		do Memory.poke(memAddress+160, 31134);
		do Memory.poke(memAddress+192, 27606);
		do Memory.poke(memAddress+224, 24570);
		do Memory.poke(memAddress+256, 26646);
		do Memory.poke(memAddress+288, 22554);
		do Memory.poke(memAddress+320, 26646);
		do Memory.poke(memAddress+352, 24570);
		do Memory.poke(memAddress+384, 27606);
		do Memory.poke(memAddress+416, 22554);
		do Memory.poke(memAddress+448, 30750);
		do Memory.poke(memAddress+480, 0);

		return;
	}

	method void dispose()
	{
		do Memory.deAlloc(this);
		return;
	}
}