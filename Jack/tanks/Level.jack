/**
 * Complete Level handler
 */
class Level
{
	// contains all level sprites
	field Array levelDefinition;

	// Player start locations and directions
	// directions: 0 = right, 1 = left, 2 = up, 3 = down
	field int player1StartDirection;
	field int player2StartDirection;
	field int player1StartX;
	field int player1StartY;
	field int player2StartX;
	field int player2StartY;

	// number of moves per player turn
	// each level can set this
	field int movesPerTurn;

	// max distance bullet travels
	field int maxShootingDistance;

	// track current level
	field int currentLevel;

	/**
	 * Create a new Level object
	 */
	constructor Level new() 
	{
		// Level is defined as a collection of 16x16 LevelSprites
		// 512x256 pixels on the screen equates to 32x16 LevelSprites (or 512 sprites in total)
		// since a level is mostly empty space this could be significantly reduced (based on the level itself)
		// but keeping it consistent makes everything else simpler. 
		let levelDefinition = Array.new(512);
		let currentLevel = 0;

		return this;
	}


	/**
	 * Draw level header (score, name, and other info)
	 */
	method void drawHeader()
	{
		var int startX;

		// don't include the level number on the menu
		if (currentLevel = 0) {
			let startX = 22;
		} else {
			let startX = 17;
		}

		// game name + current level
		do Output.moveCursor(0, startX);
		do Main.printString("                                     ");
		do Output.moveCursor(0, startX);
		do Main.printString("Tiny Tactical Tanks");

		if (currentLevel > 0) {
			do Main.printString(" [Level ");
			do Output.printInt(currentLevel);
			do Main.printString("]");
		}

		// player icons
		let levelDefinition[Level.getSpriteIndex(1, 0)] = LevelSprite.newPlayerIcon(1, 0, 1);				// player 1
		let levelDefinition[Level.getSpriteIndex(30, 0)] = LevelSprite.newPlayerIcon(30, 0, 2);				// player 2

		return;
	}

	/**
	 * Clear levelDefinition array for next level
	 */ 
	method void clearLevelDefinition()
	{
		var int i;
		var int pointer;
		var LevelSprite levelSprite;

		// clear screen entirely
		do Screen.clearScreen();
		
		let i = 0;

		while (i < 512) {
			// check if there's a non-empty sprite at memory location
			let pointer = levelDefinition[i];

			if (pointer > 0) {
				// remove (clear) and dispose of sprite
				let levelSprite = levelDefinition[i];
				do levelSprite.remove();
				do levelSprite.dispose();
				let levelDefinition[i] = 0;
			}

			let i = i + 1;
		}

		return;
	}

	/**
	 * Return the current level
	 */
	method int getCurrentLevel()
	{
		return currentLevel;
	}

	/**
	 * Load level by level number
	 */
	method void loadLevel(int level)
	{
		// any invalid level, just load first level
		if (level < 0) {
			let level = 5;
		} else { if (level > 5) {
			let level = 0;
		}}

		// first remove all existing level data
		do clearLevelDefinition();

		// load level
		if (level = 0) {
			do loadMenu();
		} else { if (level = 1) {
			do loadLevel1();
		} else { if (level = 2) {
			do loadLevel2();
		} else { if (level = 3) {
			do loadLevel3();
		} else { if (level = 4) {
			do loadLevel4();
		} else { if (level = 5) {
			do loadLevel5();
		}
		}}}}}

		let currentLevel = level;

		// draw the level header
		do drawHeader();

		return;
	}

	/**
	 * Draws a game over screen
	 */
	method void loadGameOver(int player1Score, int player2Score)
	{
		var GameOver gameOver;

		// clear level definition
		do clearLevelDefinition();

		let gameOver = GameOver.new(levelDefinition, player1Score, player2Score);
		do gameOver.dispose();

		do draw();
		return;
	}

	method void loadMenu()
	{
		// create new menu level
		var Menu menu;
		let menu = Menu.new(levelDefinition);

		let player1StartDirection = menu.getPlayer1StartDirection();
		let player2StartDirection = menu.getPlayer2StartDirection();
		let player1StartX = menu.getPlayer1StartX();
		let player1StartY = menu.getPlayer1StartY();
		let player2StartX = menu.getPlayer2StartX();
		let player2StartY = menu.getPlayer2StartY();

		let movesPerTurn = menu.getMovesPerTurn();
		let maxShootingDistance = menu.getMaxShootingDistance();

		// dispose menu object because we have everything we need
		do menu.dispose();
		return;
	}

	method void loadLevel1()
	{
		// create new level 1
		var Level1 level;
		let level = Level1.new(levelDefinition);

		let player1StartDirection = level.getPlayer1StartDirection();
		let player2StartDirection = level.getPlayer2StartDirection();
		let player1StartX = level.getPlayer1StartX();
		let player1StartY = level.getPlayer1StartY();
		let player2StartX = level.getPlayer2StartX();
		let player2StartY = level.getPlayer2StartY();

		let movesPerTurn = level.getMovesPerTurn();
		let maxShootingDistance = level.getMaxShootingDistance();

		// dispose level 1 object because we have everything we need
		do level.dispose();
		return;
	}

	method void loadLevel2()
	{
		// create new level 2
		var Level2 level;
		let level = Level2.new(levelDefinition);

		let player1StartDirection = level.getPlayer1StartDirection();
		let player2StartDirection = level.getPlayer2StartDirection();
		let player1StartX = level.getPlayer1StartX();
		let player1StartY = level.getPlayer1StartY();
		let player2StartX = level.getPlayer2StartX();
		let player2StartY = level.getPlayer2StartY();

		let movesPerTurn = level.getMovesPerTurn();
		let maxShootingDistance = level.getMaxShootingDistance();

		// dispose level 2 object because we have everything we need
		do level.dispose();
		return;
	}	

	method void loadLevel3()
	{
		// create new level 3
		var Level3 level;
		let level = Level3.new(levelDefinition);

		let player1StartDirection = level.getPlayer1StartDirection();
		let player2StartDirection = level.getPlayer2StartDirection();
		let player1StartX = level.getPlayer1StartX();
		let player1StartY = level.getPlayer1StartY();
		let player2StartX = level.getPlayer2StartX();
		let player2StartY = level.getPlayer2StartY();

		let movesPerTurn = level.getMovesPerTurn();
		let maxShootingDistance = level.getMaxShootingDistance();

		// dispose level 3 object because we have everything we need
		do level.dispose();
		return;
	}		

	method void loadLevel4()
	{
		// create new level 4
		var Level4 level;
		let level = Level4.new(levelDefinition);

		let player1StartDirection = level.getPlayer1StartDirection();
		let player2StartDirection = level.getPlayer2StartDirection();
		let player1StartX = level.getPlayer1StartX();
		let player1StartY = level.getPlayer1StartY();
		let player2StartX = level.getPlayer2StartX();
		let player2StartY = level.getPlayer2StartY();

		let movesPerTurn = level.getMovesPerTurn();
		let maxShootingDistance = level.getMaxShootingDistance();

		// dispose level 4 object because we have everything we need
		do level.dispose();
		return;
	}	

	method void loadLevel5()
	{
		// create new level 5
		var Level5 level;
		let level = Level5.new(levelDefinition);

		let player1StartDirection = level.getPlayer1StartDirection();
		let player2StartDirection = level.getPlayer2StartDirection();
		let player1StartX = level.getPlayer1StartX();
		let player1StartY = level.getPlayer1StartY();
		let player2StartX = level.getPlayer2StartX();
		let player2StartY = level.getPlayer2StartY();

		let movesPerTurn = level.getMovesPerTurn();
		let maxShootingDistance = level.getMaxShootingDistance();

		// dispose level 5 object because we have everything we need
		do level.dispose();
		return;
	}	

	/**
	 * Get max bullet distance travel
	 */
	method int getMaxShootingDistance()
	{
		return maxShootingDistance;
	}

	/**
	 * Get Player 1 start direction
	 */
	method int getPlayer1StartDirection()
	{
		return player1StartDirection;
	}

	/**
	 * Get Player 1 start offset X
	 */
	method int getPlayer1StartX()
	{
		return player1StartX;
	} 

	/**
	 * Get Player 1 start offset Y
	 */
	method int getPlayer1StartY()
	{
		return player1StartY;
	} 

	/**
	 * Get Player 2 start direction
	 */
	method int getPlayer2StartDirection()
	{
		return player2StartDirection;
	}

	/**
	 * Get Player 2 start offset X
	 */
	method int getPlayer2StartX()
	{
		return player2StartX;
	} 

	/**
	 * Get Player 2 start offset Y
	 */
	method int getPlayer2StartY()
	{
		return player2StartY;
	} 	

	method int getMovesPerTurn()
	{
	 	return movesPerTurn;
	}

	/**
	 * Calculate the sprite's index in the levelDefinition array
	 * @param int x
	 * @param int y
	 */
	function int getSpriteIndex(int x, int y)
	{
		return (32 * y) + x;
	}

	/**
	 * draw all level sprites to screen
	 */
	method void draw()
	{
		var int i;
		var int pointer;
		var LevelSprite levelSprite;

		let i = 0;

		while (i < 512) {
			// check if there's a non-empty sprite at memory location
			let pointer = levelDefinition[i];

			if (pointer > 0) {
				let levelSprite = levelDefinition[i];
				do levelSprite.draw();
			}

			let i = i + 1;
		}

		return;
	}

	/**
	 * Remove sprite at x, y
	 */
	method void removeSprite(int x, int y)
	{
		var int index;
		var int pointer;
		var LevelSprite levelSprite;

		let index = Level.getSpriteIndex(x, y);

		let pointer = levelDefinition[index];

		if (pointer > 0) {
			let levelSprite = levelDefinition[index];
			do levelSprite.remove();
			do levelSprite.dispose();
		}

		let levelDefinition[index] = 0;

		return;
	}

	/**
	 * Check if the player or player bullet is colliding with level geometry
	 * @return int type
	 */
	method int detectCollision(int x, int y)
	{
		// check if there's a sprite at that index

		var int index;
		var int pointer;
		var int typeDetected;
		var LevelSprite levelSprite;

		let index = Level.getSpriteIndex(x, y);

		let pointer = levelDefinition[index];

		if (pointer > 0) {
			let levelSprite = levelDefinition[index];
			let typeDetected = levelSprite.getType();

			// TODO return levelSprite so we can check breakable state
			return typeDetected;
		}

		return 0;
	}

	/**
	 * Cleanup level definition and self
	 */
	method void dispose()
	{
		do levelDefinition.dispose();
		do Memory.deAlloc(this);
		return;
	}
}