/**
 * Level 4 layout and properties
 */
class Level4
{
	field Array levelDefinition;

	constructor Level4 new(int levelDefinitionPointer)
	{
		// general iterator
		var int i;		

		let levelDefinition = levelDefinitionPointer;

		// Level:
		// 0 = empty, 1 = concrete, 2 = steel, x = player1 start, y = player2 start, 
		// top two rows are typically for header (set in level.jack)
		// sprite offset on screen = col + (row * 512)
		// 
		// 0 -  00000000000000000000000000000000	levelDefinition[0-31]
		// 1 -  00000000000000000000000000000000 	levelDefinition[32-63]		
		// 2 -  22222222222222222222222222222222	levelDefinition[64-95]
		// 3 -  20000000000000x22000000000000002	levelDefinition[96-127]
		// 4 -  20000000000000022000000000000002	levelDefinition[128-159]
		// 5 -  20001111111100022000111111110002	levelDefinition[160-191]
		// 6 -  20000000000000022000000000000002	levelDefinition[192-223]
		// 7 -  00000o00000000022000000000000000	levelDefinition[224-255]
		// 8 -  00000000000000022000000000000000	levelDefinition[256-287]
		// 9 -  00000000000000022000000000000000	levelDefinition[288-319]
		// 10 - 00000000000000022000000000000000	levelDefinition[320-351]
		// 11 - 20000000000000022000000000000002	levelDefinition[352-382]
		// 12 - 20001111111100022000111111110002	levelDefinition[384-415]
		// 13 - 20000000000000022000000000000002	levelDefinition[416-447]
		// 14 - 20000000000000022y00000000000002	levelDefinition[448-479]
		// 15 - 22222222222222222222222222222222	levelDefinition[480-511]
		// 

		// *******************************
		// Draw Stage
		// *******************************

		// build row 2 + 15 (top + bottom walls)
		let i = 0;
		while (i < 32) {
			// row 2
			let levelDefinition[Level.getSpriteIndex(i, 2)] = LevelSprite.newSteelWall(i, 2);

			// row 15
			let levelDefinition[Level.getSpriteIndex(i, 15)] = LevelSprite.newSteelWall(i, 15);
			let i = i + 1;
		}

		// center columns of solid steel
		let i = 3;
		while (i < 15) {
			let levelDefinition[Level.getSpriteIndex(15, i)] = LevelSprite.newSteelWall(15, i);
			let levelDefinition[Level.getSpriteIndex(16, i)] = LevelSprite.newSteelWall(16, i);
			let i = i + 1;
		}

		// concrete
		let i = 4;
		while (i < 12) {
			let levelDefinition[Level.getSpriteIndex(i, 5)] = LevelSprite.newConcreteWall(i, 5);
			let levelDefinition[Level.getSpriteIndex(i + 15, 5)] = LevelSprite.newConcreteWall(i + 15, 5);
			let levelDefinition[Level.getSpriteIndex(i, 12)] = LevelSprite.newConcreteWall(i, 12);
			let levelDefinition[Level.getSpriteIndex(i + 15, 12)] = LevelSprite.newConcreteWall(i + 15, 12);
			let i = i + 1;
		}

		// row 3 - 6 + 11 - 14, columns 0 + 31
		let i = 3;
		while (i < 7) {
			// left + right walls
			let levelDefinition[Level.getSpriteIndex(0, i)] = LevelSprite.newSteelWall(0, i);
			let levelDefinition[Level.getSpriteIndex(31, i)] = LevelSprite.newSteelWall(31, i);

			let i = i + 1;
		}

		let i = 11;
		while (i < 15) {
			// left + right walls
			let levelDefinition[Level.getSpriteIndex(0, i)] = LevelSprite.newSteelWall(0, i);
			let levelDefinition[Level.getSpriteIndex(31, i)] = LevelSprite.newSteelWall(31, i);

			let i = i + 1;
		}


		return this;
	}

	/**
	 * Limit distance (number of sprites) the bullet travels in this level
	 * Between 1 and 32
	 */
	method int getMaxShootingDistance()
	{
		return 20;
	}

	/**
	 * Number of moves per player turn
	 */
	method int getMovesPerTurn()
	{
		return 15;
	}

	/**
	 * Get Player 1 start direction
	 */
	method int getPlayer1StartDirection()
	{
		// left
		return 1;
	}

	/**
	 * Get Player 1 start offset X
	 */
	method int getPlayer1StartX()
	{
		return 14;
	} 

	/**
	 * Get Player 1 start offset Y
	 */
	method int getPlayer1StartY()
	{
		return 3;
	} 

	/**
	 * Get Player 2 start direction
	 */
	method int getPlayer2StartDirection()
	{
		// right
		return 0;
	}

	/**
	 * Get Player 2 start offset X
	 */
	method int getPlayer2StartX()
	{
		return 17;
	} 

	/**
	 * Get Player 2 start offset Y
	 */
	method int getPlayer2StartY()
	{
		return 14;
	} 		

	method void dispose()
	{
		do Memory.deAlloc(this);
		return;
	}
}