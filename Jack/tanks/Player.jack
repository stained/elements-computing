class Player
{
	// location and facing direction
	field int currentDirection;
	field int x;
	field int y;

	// whether to show normal or alternative frame in movement
	field bool alternativeFrame;

	// reference to the tank gme
	field TankGame tankGame;

	// player number
	field int player;

	/**
	 * Create a new Player [1/2] at location, passing a reference to the current tank game object
	 */
	constructor Player new(Tankgame currentTankGame, int playerNumber, int xOffset, int yOffset, int direction)
	{
		let currentDirection = 0;
		let alternativeFrame = false;
		let tankGame = currentTankGame;
		let x = xOffset;
		let y = yOffset;
		let currentDirection = direction;
		let player = playerNumber;
		return this;
	}

	/**
	 * Set tank location and direction, then draw
	 *
	 * @param int xOffset
	 * @param int yOffset
	 * @param int direction
	 * @param boolean fancyLoad
	 */ 
	method void setLocationAndDirection(int xOffset, int yOffset, int direction, boolean fancyLoad)
	{
		// check if we're colliding with the level geometry or other player
		if (xOffset = x & yOffset = y) {
			// we don't need to do detection if we're just turning around
		} else {
			if (tankGame.detectLevelCollision(xOffset, yOffset, false) | tankGame.detectPlayerCollision(xOffset, yOffset, false)) {
				return;
			} 
		}

		// clear old drawing
		let currentDirection = -1;
		do draw();

		// update location and draw
		let x = xOffset;
		let y = yOffset;
		let currentDirection = direction;

		if (~fancyLoad) {
			do draw();
		} else {
			do fancyLoad();
		}

		return;
	}

	/**
	 * check whether another player has collided with this one
	 */
	method int detectCollision(int otherX, int otherY)
	{
		return x = otherX & y = otherY;
	}

	/**
	 * Shoot a bullet, and keep moving until it hits something
	 */
	method void shoot()
	{
		// shoot bullet in direction tank is facing
		var int bulletX;
		var int bulletY;
		var int offset;
		var boolean shotComplete;
		var int distanceTravelled;

		let bulletX = x;
		let bulletY = y;
		let shotComplete = false;
		let distanceTravelled = 0;

		// loop until we hit something
		while (~shotComplete) {

			if (currentDirection = 0) {
				// facing right
				let bulletX = bulletX + 1;
			} else {
				if (currentDirection = 1) {
					// facing left
					let bulletX = bulletX - 1;
 				} else {
					if (currentDirection = 2) {
						// facing up
						let bulletY = bulletY - 1;
					} else {
						if (currentDirection = 3) {
							// facing down
							let bulletY = bulletY + 1;
						}
					}
 				}
			}

			// check whether we've hit the level geometry or other player
			if (tankGame.detectLevelCollision(bulletX, bulletY, true) | tankGame.detectPlayerCollision(bulletX, bulletY, true)) {
				do clear(offset);
				return;
			}

			// check distance shot travelled
			if (distanceTravelled = tankGame.getMaxShootingDistance()) {
				do clear(offset);
				return;
			}

			let distanceTravelled = distanceTravelled + 1;

			let offset = bulletX + (bulletY * 512);
			do drawBulletFrame(offset);
			do Sys.wait(30);
			do clear(offset);
		}

		return;
	}

	/**
	 * Kill player with fancy animation
	 */ 
	method void explode()
	{
		var int offset;
		let offset = x + (y * 512);
		do drawExplosionFrame0(offset);
		do Sys.wait(60);
		do drawExplosionFrame1(offset);
		do Sys.wait(60);
		do drawExplosionFrame2(offset);
		do Sys.wait(60);
		do clear(offset);
		do Sys.wait(400);

		return;
	}

	/**
	 * Load tank onto the screen in a fancy way
	 */ 
	method void fancyLoad()
	{
		var int offset;
		let offset = x + (y * 512);
		do drawExplosionFrame0(offset);
		do Sys.wait(60);
		do drawExplosionFrame1(offset);
		do Sys.wait(60);
		do clear(offset);
		do Sys.wait(60);
		do draw();
		do Sys.wait(400);

		return;
	}

	/**
	 * Player key press handler
	 */
	method void keyPressed(int key)
	{
		// right arrow
		if (key = 132) {
			// move right
			if (currentDirection = 0) {
				do setLocationAndDirection(x + 1, y, 0, false);
				return;
			}

			// just turn
			do setLocationAndDirection(x, y, 0, false);
			return;
		}

		// left arrow
		if (key = 130) {
			// move left
			if (currentDirection = 1) {
				do setLocationAndDirection(x - 1, y, 1, false);
				return;
			}

			// just turn
			do setLocationAndDirection(x, y, 1, false);
			return;
		}

		// up arrow
		if (key = 131) {
			// move up
			if (currentDirection = 2) {
				do setLocationAndDirection(x, y - 1, 2, false);
				return;
			} 

			// just turn in-place
			do setLocationAndDirection(x, y, 2, false);
			return;
		}

		// down arrow
		if (key = 133) {
			// move down
			if (currentDirection = 3) {
				do setLocationAndDirection(x, y + 1, 3, false);
				return;
			}

			// just turn
			do setLocationAndDirection(x, y, 3, false);
			return;
		}

		// space
		if (key = 32) {
			// shoot!
			do shoot();
			return;
		}

		return;
	}

	/**
	 * Draw tank for current location + direction
	 */
	method void draw() 
	{
		var int offset;
		let offset = x + (y * 512);

		if (currentDirection = -1) {
			// clear
			do clear(offset);
		}

		// right
		if (currentDirection = 0) {
			if (~alternativeFrame) {
				do drawFrameRightNormal(offset);
			} else {
				do drawFrameRightAlternative(offset);
			}

			let alternativeFrame = ~alternativeFrame;
			return;
		}

		// left
		if (currentDirection = 1) {
			if (~alternativeFrame) {
				do drawFrameLeftNormal(offset);
			} else {
				do drawFrameLeftAlternative(offset);
			}

			let alternativeFrame = ~alternativeFrame;
			return;
		}

		// up
		if (currentDirection = 2) {
			if (~alternativeFrame) {
				do drawFrameUpNormal(offset);
			} else {
				do drawFrameUpAlternative(offset);
			}

			let alternativeFrame = ~alternativeFrame;
			return;
		}

		// down
		if (currentDirection = 3) {
			if (~alternativeFrame) {
				do drawFrameDownNormal(offset);
			} else {
				do drawFrameDownAlternative(offset);
			}

			let alternativeFrame = ~alternativeFrame;
			return;
		}

		return;		
	}

	/*
	 **************************************************************************
	 * Player frame drawing routines
	 **************************************************************************
	 */

	method void drawFrameRightNormal(int location) 
	{
		var int memAddress; 
		let memAddress = 16384+location;

		if (player = 1) {
			do Memory.poke(memAddress+0, 0);
			do Memory.poke(memAddress+32, 2046);
			do Memory.poke(memAddress+64, 1366);
			do Memory.poke(memAddress+96, 1706);
			do Memory.poke(memAddress+128, 2046);
			do Memory.poke(memAddress+160, 496);
			do Memory.poke(memAddress+192, 16880);
			do Memory.poke(memAddress+224, 32760);
			do Memory.poke(memAddress+256, 32760);
			do Memory.poke(memAddress+288, 16880);
			do Memory.poke(memAddress+320, 496);
			do Memory.poke(memAddress+352, 2046);
			do Memory.poke(memAddress+384, 1706);
			do Memory.poke(memAddress+416, 1366);
			do Memory.poke(memAddress+448, 2046);
			do Memory.poke(memAddress+480, 0);
		} else {
			do Memory.poke(memAddress+0, 0);
			do Memory.poke(memAddress+32, 2046);
			do Memory.poke(memAddress+64, 1366);
			do Memory.poke(memAddress+96, 1706);
			do Memory.poke(memAddress+128, 2046);
			do Memory.poke(memAddress+160, 272);
			do Memory.poke(memAddress+192, 792);
			do Memory.poke(memAddress+224, 32536);
			do Memory.poke(memAddress+256, 32536);
			do Memory.poke(memAddress+288, 792);
			do Memory.poke(memAddress+320, 272);
			do Memory.poke(memAddress+352, 2046);
			do Memory.poke(memAddress+384, 1706);
			do Memory.poke(memAddress+416, 1366);
			do Memory.poke(memAddress+448, 2046);
			do Memory.poke(memAddress+480, 0);
		}

		return;
	}	

	method void drawFrameRightAlternative(int location) 
	{
		var int memAddress; 
		let memAddress = 16384+location;

		if (player = 1) {
			do Memory.poke(memAddress+0, 0);
			do Memory.poke(memAddress+32, 2046);
			do Memory.poke(memAddress+64, 1706);
			do Memory.poke(memAddress+96, 1366);
			do Memory.poke(memAddress+128, 2046);
			do Memory.poke(memAddress+160, 496);
			do Memory.poke(memAddress+192, 16880);
			do Memory.poke(memAddress+224, 32760);
			do Memory.poke(memAddress+256, 32760);
			do Memory.poke(memAddress+288, 16880);
			do Memory.poke(memAddress+320, 496);
			do Memory.poke(memAddress+352, 2046);
			do Memory.poke(memAddress+384, 1366);
			do Memory.poke(memAddress+416, 1706);
			do Memory.poke(memAddress+448, 2046);
			do Memory.poke(memAddress+480, 0);
		} else {
			do Memory.poke(memAddress+0, 0);
			do Memory.poke(memAddress+32, 2046);
			do Memory.poke(memAddress+64, 1706);
			do Memory.poke(memAddress+96, 1366);
			do Memory.poke(memAddress+128, 2046);
			do Memory.poke(memAddress+160, 272);
			do Memory.poke(memAddress+192, 792);
			do Memory.poke(memAddress+224, 32536);
			do Memory.poke(memAddress+256, 32536);
			do Memory.poke(memAddress+288, 792);
			do Memory.poke(memAddress+320, 272);
			do Memory.poke(memAddress+352, 2046);
			do Memory.poke(memAddress+384, 1366);
			do Memory.poke(memAddress+416, 1706);
			do Memory.poke(memAddress+448, 2046);
			do Memory.poke(memAddress+480, 0);
		}

		return;
	}	


	method void drawFrameLeftNormal(int location) {
		var int memAddress; 
		let memAddress = 16384+location;
		if (player = 1) {
			do Memory.poke(memAddress+0, 0);
			do Memory.poke(memAddress+32, 32736);
			do Memory.poke(memAddress+64, 27296);
			do Memory.poke(memAddress+96, 21856);
			do Memory.poke(memAddress+128, 32736);
			do Memory.poke(memAddress+160, 3968);
			do Memory.poke(memAddress+192, 3970);
			do Memory.poke(memAddress+224, 8190);
			do Memory.poke(memAddress+256, 8190);
			do Memory.poke(memAddress+288, 3970);
			do Memory.poke(memAddress+320, 3968);
			do Memory.poke(memAddress+352, 32736);
			do Memory.poke(memAddress+384, 21856);
			do Memory.poke(memAddress+416, 27296);
			do Memory.poke(memAddress+448, 32736);
			do Memory.poke(memAddress+480, 0);		
		} else {
			do Memory.poke(memAddress+0, 0);
			do Memory.poke(memAddress+32, 32736);
			do Memory.poke(memAddress+64, 21856);
			do Memory.poke(memAddress+96, 27296);
			do Memory.poke(memAddress+128, 32736);
			do Memory.poke(memAddress+160, 2176);
			do Memory.poke(memAddress+192, 6336);
			do Memory.poke(memAddress+224, 6398);
			do Memory.poke(memAddress+256, 6398);
			do Memory.poke(memAddress+288, 6336);
			do Memory.poke(memAddress+320, 2176);
			do Memory.poke(memAddress+352, 32736);
			do Memory.poke(memAddress+384, 27296);
			do Memory.poke(memAddress+416, 21856);
			do Memory.poke(memAddress+448, 32736);
			do Memory.poke(memAddress+480, 0);		
		}

		return;
	}

	method void drawFrameLeftAlternative(int location) {
		var int memAddress; 
		let memAddress = 16384+location;

		if (player = 1) {
			do Memory.poke(memAddress+0, 0);
			do Memory.poke(memAddress+32, 32736);
			do Memory.poke(memAddress+64, 21856);
			do Memory.poke(memAddress+96, 27296);
			do Memory.poke(memAddress+128, 32736);
			do Memory.poke(memAddress+160, 3968);
			do Memory.poke(memAddress+192, 3970);
			do Memory.poke(memAddress+224, 8190);
			do Memory.poke(memAddress+256, 8190);
			do Memory.poke(memAddress+288, 3970);
			do Memory.poke(memAddress+320, 3968);
			do Memory.poke(memAddress+352, 32736);
			do Memory.poke(memAddress+384, 27296);
			do Memory.poke(memAddress+416, 21856);
			do Memory.poke(memAddress+448, 32736);
			do Memory.poke(memAddress+480, 0);		
		} else {
			do Memory.poke(memAddress+0, 0);
			do Memory.poke(memAddress+32, 32736);
			do Memory.poke(memAddress+64, 27296);
			do Memory.poke(memAddress+96, 21856);
			do Memory.poke(memAddress+128, 32736);
			do Memory.poke(memAddress+160, 2176);
			do Memory.poke(memAddress+192, 6336);
			do Memory.poke(memAddress+224, 6398);
			do Memory.poke(memAddress+256, 6398);
			do Memory.poke(memAddress+288, 6336);
			do Memory.poke(memAddress+320, 2176);
			do Memory.poke(memAddress+352, 32736);
			do Memory.poke(memAddress+384, 21856);
			do Memory.poke(memAddress+416, 27296);
			do Memory.poke(memAddress+448, 32736);
			do Memory.poke(memAddress+480, 0);		
		}

		return;
	}

	method void drawFrameUpNormal(int location) {
		var int memAddress; 
		let memAddress = 16384+location;

		if (player = 1) {
			do Memory.poke(memAddress+0, 0);
			do Memory.poke(memAddress+32, 960);
			do Memory.poke(memAddress+64, 384);
			do Memory.poke(memAddress+96, 384);
			do Memory.poke(memAddress+128, 384);
			do Memory.poke(memAddress+160, 31134);
			do Memory.poke(memAddress+192, 22938);
			do Memory.poke(memAddress+224, 28662);
			do Memory.poke(memAddress+256, 24570);
			do Memory.poke(memAddress+288, 28662);
			do Memory.poke(memAddress+320, 24570);
			do Memory.poke(memAddress+352, 28662);
			do Memory.poke(memAddress+384, 22938);
			do Memory.poke(memAddress+416, 26646);
			do Memory.poke(memAddress+448, 30750);
			do Memory.poke(memAddress+480, 0);
		} else {
			do Memory.poke(memAddress+0, 0);
			do Memory.poke(memAddress+32, 384);
			do Memory.poke(memAddress+64, 384);
			do Memory.poke(memAddress+96, 384);
			do Memory.poke(memAddress+128, 384);
			do Memory.poke(memAddress+160, 31134);
			do Memory.poke(memAddress+192, 27606);
			do Memory.poke(memAddress+224, 24570);
			do Memory.poke(memAddress+256, 26646);
			do Memory.poke(memAddress+288, 22554);
			do Memory.poke(memAddress+320, 26646);
			do Memory.poke(memAddress+352, 24570);
			do Memory.poke(memAddress+384, 27606);
			do Memory.poke(memAddress+416, 22554);
			do Memory.poke(memAddress+448, 30750);
			do Memory.poke(memAddress+480, 0);
		}

		return;
	}

	method void drawFrameUpAlternative(int location) {
		var int memAddress; 
		let memAddress = 16384+location;

		if (player = 1) {
			do Memory.poke(memAddress+0, 0);
			do Memory.poke(memAddress+32, 960);
			do Memory.poke(memAddress+64, 384);
			do Memory.poke(memAddress+96, 384);
			do Memory.poke(memAddress+128, 384);
			do Memory.poke(memAddress+160, 31134);
			do Memory.poke(memAddress+192, 27030);
			do Memory.poke(memAddress+224, 24570);
			do Memory.poke(memAddress+256, 28662);
			do Memory.poke(memAddress+288, 24570);
			do Memory.poke(memAddress+320, 28662);
			do Memory.poke(memAddress+352, 24570);
			do Memory.poke(memAddress+384, 27030);
			do Memory.poke(memAddress+416, 22554);
			do Memory.poke(memAddress+448, 30750);
			do Memory.poke(memAddress+480, 0);
		} else {
			do Memory.poke(memAddress+0, 0);
			do Memory.poke(memAddress+32, 384);
			do Memory.poke(memAddress+64, 384);
			do Memory.poke(memAddress+96, 384);
			do Memory.poke(memAddress+128, 384);
			do Memory.poke(memAddress+160, 31134);
			do Memory.poke(memAddress+192, 23514);
			do Memory.poke(memAddress+224, 28662);
			do Memory.poke(memAddress+256, 22554);
			do Memory.poke(memAddress+288, 26646);
			do Memory.poke(memAddress+320, 22554);
			do Memory.poke(memAddress+352, 28662);
			do Memory.poke(memAddress+384, 23514);
			do Memory.poke(memAddress+416, 26646);
			do Memory.poke(memAddress+448, 30750);
			do Memory.poke(memAddress+480, 0);
		}

		return;
	}

	method void drawFrameDownNormal(int location) {
		var int memAddress; 
		let memAddress = 16384+location;

		if (player = 1) {
			do Memory.poke(memAddress+0, 0);
			do Memory.poke(memAddress+32, 30750);
			do Memory.poke(memAddress+64, 26646);
			do Memory.poke(memAddress+96, 22938);
			do Memory.poke(memAddress+128, 28662);
			do Memory.poke(memAddress+160, 24570);
			do Memory.poke(memAddress+192, 28662);
			do Memory.poke(memAddress+224, 24570);
			do Memory.poke(memAddress+256, 28662);
			do Memory.poke(memAddress+288, 22938);
			do Memory.poke(memAddress+320, 31134);
			do Memory.poke(memAddress+352, 384);
			do Memory.poke(memAddress+384, 384);
			do Memory.poke(memAddress+416, 384);
			do Memory.poke(memAddress+448, 960);
			do Memory.poke(memAddress+480, 0);
		} else {
			do Memory.poke(memAddress+0, 0);
			do Memory.poke(memAddress+32, 30750);
			do Memory.poke(memAddress+64, 22554);
			do Memory.poke(memAddress+96, 27606);
			do Memory.poke(memAddress+128, 24570);
			do Memory.poke(memAddress+160, 26646);
			do Memory.poke(memAddress+192, 22554);
			do Memory.poke(memAddress+224, 26646);
			do Memory.poke(memAddress+256, 24570);
			do Memory.poke(memAddress+288, 27606);
			do Memory.poke(memAddress+320, 31134);
			do Memory.poke(memAddress+352, 384);
			do Memory.poke(memAddress+384, 384);
			do Memory.poke(memAddress+416, 384);
			do Memory.poke(memAddress+448, 384);
			do Memory.poke(memAddress+480, 0);
		}

		return;
	}

	method void drawFrameDownAlternative(int location) {
		var int memAddress; 
		let memAddress = 16384+location;

		if (player = 1) {
			do Memory.poke(memAddress+0, 0);
			do Memory.poke(memAddress+32, 30750);
			do Memory.poke(memAddress+64, 22554);
			do Memory.poke(memAddress+96, 27030);
			do Memory.poke(memAddress+128, 24570);
			do Memory.poke(memAddress+160, 28662);
			do Memory.poke(memAddress+192, 24570);
			do Memory.poke(memAddress+224, 28662);
			do Memory.poke(memAddress+256, 24570);
			do Memory.poke(memAddress+288, 27030);
			do Memory.poke(memAddress+320, 31134);
			do Memory.poke(memAddress+352, 384);
			do Memory.poke(memAddress+384, 384);
			do Memory.poke(memAddress+416, 384);
			do Memory.poke(memAddress+448, 960);
			do Memory.poke(memAddress+480, 0);
		} else {
			do Memory.poke(memAddress+0, 0);
			do Memory.poke(memAddress+32, 30750);
			do Memory.poke(memAddress+64, 26646);
			do Memory.poke(memAddress+96, 23514);
			do Memory.poke(memAddress+128, 28662);
			do Memory.poke(memAddress+160, 22554);
			do Memory.poke(memAddress+192, 26646);
			do Memory.poke(memAddress+224, 22554);
			do Memory.poke(memAddress+256, 28662);
			do Memory.poke(memAddress+288, 23514);
			do Memory.poke(memAddress+320, 31134);
			do Memory.poke(memAddress+352, 384);
			do Memory.poke(memAddress+384, 384);
			do Memory.poke(memAddress+416, 384);
			do Memory.poke(memAddress+448, 384);
			do Memory.poke(memAddress+480, 0);
		}

		return;
	}

	/*
	 **************************************************************************
	 * General frame drawing routines
	 **************************************************************************
	*/

	// draw explosion frame over the tank sprite
	method void drawExplosionFrame0(int location)
	{
		var int memAddress; 

		var int memOffset1;
		var int memOffset2;
		var int memOffset3;
		var int memOffset4;
		var int memOffset5;
		var int memOffset6;
		var int memOffset7;
		var int memOffset8;
		var int memOffset9;
		var int memOffset10;
		var int memOffset11;
		var int memOffset12;
		var int memOffset13;
		var int memOffset14;
		var int memOffset15;
		var int memOffset16;

		// get current mem values
		let memAddress = 16384+location;
		let memOffset1 = Memory.peek(memAddress+0);
		let memOffset2 = Memory.peek(memAddress+32);
		let memOffset3 = Memory.peek(memAddress+64);
		let memOffset4 = Memory.peek(memAddress+96);
		let memOffset5 = Memory.peek(memAddress+128);
		let memOffset6 = Memory.peek(memAddress+160);
		let memOffset7 = Memory.peek(memAddress+192);
		let memOffset8 = Memory.peek(memAddress+224);
		let memOffset9 = Memory.peek(memAddress+256);
		let memOffset10 = Memory.peek(memAddress+288);
		let memOffset11 = Memory.peek(memAddress+320);
		let memOffset12 = Memory.peek(memAddress+352);
		let memOffset13 = Memory.peek(memAddress+384);
		let memOffset14 = Memory.peek(memAddress+416);
		let memOffset15 = Memory.peek(memAddress+448);
		let memOffset16 = Memory.peek(memAddress+480);

		// combine explosion frame with tank
		do Memory.poke(memAddress+0, 8576 | memOffset1);
		do Memory.poke(memAddress+32, 13039 | memOffset2);
		do Memory.poke(memAddress+64, 13932 | memOffset3);
		do Memory.poke(memAddress+96, 11375 | memOffset4);
		do Memory.poke(memAddress+128, 8362 | memOffset5);
		do Memory.poke(memAddress+160, 24582 | memOffset6);
		do Memory.poke(memAddress+192, 28676 | memOffset7);
		do Memory.poke(memAddress+224, 2060 | memOffset8);
		do Memory.poke(memAddress+256, 1054 | memOffset9);
		do Memory.poke(memAddress+288, 7960 | memOffset10);
		do Memory.poke(memAddress+320, 12478 | memOffset11);
		do Memory.poke(memAddress+352, 24614 | memOffset12);
		do Memory.poke(memAddress+384, 3966 | memOffset13);
		do Memory.poke(memAddress+416, 3581 | memOffset14);
		do Memory.poke(memAddress+448, 23596 | memOffset15);
		do Memory.poke(memAddress+480, -16124 | memOffset16);		

		return;
	} 

	method void drawExplosionFrame1(int location)
	{
		var int memAddress; 
		let memAddress = 16384+location;

		do Memory.poke(memAddress+0, 0);
		do Memory.poke(memAddress+32, 0);
		do Memory.poke(memAddress+64, 0);
		do Memory.poke(memAddress+96, 128);
		do Memory.poke(memAddress+128, 128);
		do Memory.poke(memAddress+160, 3248);
		do Memory.poke(memAddress+192, 1056);
		do Memory.poke(memAddress+224, 2064);
		do Memory.poke(memAddress+256, 1056);
		do Memory.poke(memAddress+288, 1440);
		do Memory.poke(memAddress+320, 2064);
		do Memory.poke(memAddress+352, 0);
		do Memory.poke(memAddress+384, 0);
		do Memory.poke(memAddress+416, 0);
		do Memory.poke(memAddress+448, 0);
		do Memory.poke(memAddress+480, 0);
		return;
	} 

	// draw explosion frame over the tank sprite
	method void drawExplosionFrame2(int location)
	{
		var int memAddress; 
		let memAddress = 16384+location;

		do Memory.poke(memAddress+0, 0);
		do Memory.poke(memAddress+32, 0);
		do Memory.poke(memAddress+64, 0);
		do Memory.poke(memAddress+96, 0);
		do Memory.poke(memAddress+128, 0);
		do Memory.poke(memAddress+160, 0);
		do Memory.poke(memAddress+192, 544);
		do Memory.poke(memAddress+224, 512);
		do Memory.poke(memAddress+256, 32);
		do Memory.poke(memAddress+288, 512);
		do Memory.poke(memAddress+320, 0);
		do Memory.poke(memAddress+352, 0);
		do Memory.poke(memAddress+384, 0);
		do Memory.poke(memAddress+416, 0);
		do Memory.poke(memAddress+448, 0);
		do Memory.poke(memAddress+480, 0);
		return;
	} 	

	method void drawBulletFrame(int location)
	{
		var int memAddress; 
		let memAddress = 16384+location;
		do Memory.poke(memAddress+0, 0);
		do Memory.poke(memAddress+32, 0);
		do Memory.poke(memAddress+64, 0);
		do Memory.poke(memAddress+96, 0);
		do Memory.poke(memAddress+128, 0);
		do Memory.poke(memAddress+160, 0);
		do Memory.poke(memAddress+192, 0);
		do Memory.poke(memAddress+224, 384);
		do Memory.poke(memAddress+256, 0);
		do Memory.poke(memAddress+288, 0);
		do Memory.poke(memAddress+320, 0);
		do Memory.poke(memAddress+352, 0);
		do Memory.poke(memAddress+384, 0);
		do Memory.poke(memAddress+416, 0);
		do Memory.poke(memAddress+448, 0);
		do Memory.poke(memAddress+480, 0);
		return;
	}

	method void clear(int location) {
		var int memAddress; 
		let memAddress = 16384+location;
		do Memory.poke(memAddress+0, 0);
		do Memory.poke(memAddress+32, 0);
		do Memory.poke(memAddress+64, 0);
		do Memory.poke(memAddress+96, 0);
		do Memory.poke(memAddress+128, 0);
		do Memory.poke(memAddress+160, 0);
		do Memory.poke(memAddress+192, 0);
		do Memory.poke(memAddress+224, 0);
		do Memory.poke(memAddress+256, 0);
		do Memory.poke(memAddress+288, 0);
		do Memory.poke(memAddress+320, 0);
		do Memory.poke(memAddress+352, 0);
		do Memory.poke(memAddress+384, 0);
		do Memory.poke(memAddress+416, 0);
		do Memory.poke(memAddress+448, 0);
		do Memory.poke(memAddress+480, 0);
		return;
	}	

	method void dispose()
	{
		do Memory.deAlloc(this);
		return;
	}
}