/**
 * The actual tank game
 */
class TankGame
{
	// Level handler
	field Level level;

	// Player 1
	field Player player1;

	// Player 2
	field Player player2;

	// Whether it's player 1's turn
	field boolean player1Turn;

	// Whether game is waiting for player to begin turn (press enter)
	field boolean playerTurnWaiting;

	// Number of moves remaining for player turn
	field int movesRemaining;

	// Max shooting distance
	field int maxShootingDistance;

	// Current player scores
	field int player1Score;
	field int player2Score;

	// whether it's the start of a new round
	field boolean newRound;

	// end of level
	field boolean gameOver;

	// countdown for next level load
	field boolean countDownStarted;
    field int countDown;

	/**
	 * Create a new tank game
	 */
	constructor TankGame new()
	{
		// create a new Level object
		let level = Level.new();

		// init player1
		let player1 = Player.new(this, 1);

		// init player2
		let player2 = Player.new(this, 2);

		// load the menu
		do loadLevel(0);

		return this;
	}

	/**
	 * Load a new level
	 * @param int levelToLoad
	 */ 
	method void loadLevel(int levelToLoad)
	{
		// load level
		do level.loadLevel(levelToLoad);

		let maxShootingDistance = level.getMaxShootingDistance();

		// player 1 gets first go
		let player1Turn = true;

		// reset moves remaining
		do updateMovesRemaining();

		// reset score
		do resetScore();

		// remove players before drawing the level, else player removal 
		// afterwards potentially leaves spaces in level geometry
		do player1.remove();
		do player2.remove();

		// and display it
		do level.draw();

		// reset players
		do resetPlayerPositions();

		// game started
		let gameOver = false;
		let countDownStarted = false;

		return;
	}

	/**
	 * Get max shooting distance for current level 
	 * used in player.shoot()
	 */
	method int getMaxShootingDistance()
	{
		return maxShootingDistance;
	}

	/**
	 * Reset scores and update on screen
	 */
	method void resetScore()
	{
		let player1Score = 0;
		let player2Score = 0;

		do Output.moveCursor(1, 5);
		do Output.printInt(0);
		do Output.moveCursor(1, 58);
		do Output.printInt(0);

		return;
	}

	/**
	 * set score and update on screen
	 */
	method void setScore(int score)
	{
		if (player1Turn) {
			do Output.moveCursor(1, 5);
			do Output.printInt(score);
		} else {
			do Output.moveCursor(1, 58);
			do Output.printInt(score);
		}

		return;
	}

	/**
	 * Update moves remaining text
	 */
	method void updateMovesRemaining()
	{
		do Output.moveCursor(1, 19);
		// clear
		do Main.printString("                                  ");
		do Output.moveCursor(1, 19);

		if (player1Turn) {
			do Main.printString("Player 1: ");
		} else {
			do Main.printString("Player 2: ");
		}

		do Output.printInt(movesRemaining);

		if (movesRemaining = 1) {
			do Main.printString(" move remains.");
		} else {
			do Main.printString(" moves remain.");
		}

		return;
	}

	/**
	 * Switch player turn + reset moves remaining for next player's turn
	 */ 
	method void nextTurn()
	{
		let playerTurnWaiting = false;
		let movesRemaining = level.getMovesPerTurn();
		do Output.moveCursor(1, 9);

		// clear
		do Main.printString("                                              ");

		do updateMovesRemaining();

		return;
	}

	/**
	 * Decrement player moves remaining count 
	 * and check whether they have any moves remaining
	 */
	method boolean decrementAndCheckMovesRemaining()
	{
		if (newRound | gameOver) {
			return false;
		}

		let movesRemaining = movesRemaining - 1;
		do updateMovesRemaining();

		if (movesRemaining = 0) {
			do turnOver();
			return false; 
		}

		return true;
	}

	/**
	 * Player turn over, control goes to next player
	 */
	method void turnOver()
	{
		let player1Turn = ~player1Turn;
		let playerTurnWaiting = true;

		do Output.moveCursor(1, 9);
		// clear
		do Main.printString("                                              ");
		do Output.moveCursor(1, 9);

		if (player1Turn) {
			do Main.printString("Player 1");
		} else {
			do Main.printString("Player 2");
		}

		do Main.printString(" your turn! Press [ENTER] to continue.");

		return;
	}

	/**
	 * Detect whether player is colliding with other player (or shooting at them)
	 * @param int x
	 * @param int y
	 * @param boolean isShooting
	 */
	method boolean detectPlayerCollision(int x, int y, boolean isShooting)
	{
		var boolean collided;
		var boolean currentPlayerKilled;

		let collided = false;
		let currentPlayerKilled = false;

		if (player1Turn) {
			// check against player 2
			let collided = player2.detectCollision(x, y);

			if (isShooting) {
				// check against self
				let currentPlayerKilled = player1.detectCollision(x, y);
			}
		} else {
			// check against player 1
			let collided = player1.detectCollision(x, y);

			if (isShooting) {
				// check against self
				let currentPlayerKilled = player2.detectCollision(x, y);
			}
		}

		if (isShooting & collided) {
			// player got shot, so end round
			do playerKilled();
			return collided;
		} 

		if (isShooting & currentPlayerKilled)
		{
			// handle player killing themself by switching turns
			let player1Turn = ~player1Turn;
			do playerKilled();
		}


		return collided | currentPlayerKilled;
	}

	/**
	 * Reset player sprites to level-specific positions
	 */
	method void resetPlayerPositions()
	{
		// reset start locations, and use the fancy tank load animation
		do player1.setLocationAndDirection(level.getPlayer1StartX(), level.getPlayer1StartY(), level.getPlayer1StartDirection(), true);
		do player2.setLocationAndDirection(level.getPlayer2StartX(), level.getPlayer2StartY(), level.getPlayer2StartDirection(), true);

		// new round, player that last won goes first
		let newRound = true;
		do nextTurn();
		return;
	}

	/**
	 * Deal with player killed
	 * increment score where game not over and deal with game over scenario (score = 10)
	 */
	method void playerKilled()
	{
		if (player1Turn) {
			// increment player1 score
			let player1Score = player1Score + 1;
			do setScore(player1Score);

			// display simple explosion animation on player2 
			do player2.explode();
		} else {
			let player2Score = player2Score + 1;
			do setScore(player2Score);
			do player1.explode();
		}

		// max 10 points per game
		if ((player2Score = 10) | (player1Score = 10)) {
			// GAME OVER!
			do gameOver();
		} else {
			// just reset for next round
			do resetPlayerPositions();
		}

		return;
	}

	/** 
	 * Show game over screen
	 */
	method void gameOver()
	{
		let gameOver = true;

		do player1.remove();
		do player2.remove();

		do level.loadGameOver(player1Score, player2Score);
		do Main.wait(100);

		// show animation of player killing other player
		// player 1 top, player 2 bottom
		do player1.setLocationAndDirection(9, 6, 0, true);
		do player2.setLocationAndDirection(21, 6, 1, true);

		// animate player 1 first
		do player1.animateTo(13, 6);
		do player2.animateTo(17, 6);

		do Main.wait(100);

		if (player1Score > player2Score) {
			do player2.explode();
			do Main.wait(100);
			do player1.animateTo(15, 6);
			do Main.wait(100);
			do player1.animateRotate();
		} else {
			do player1.explode();
			do Main.wait(100);
			do player2.animateTo(15, 6);
			do Main.wait(100);
			do player2.animateRotate();
		}

		let countDownStarted = true;

		// start off at 1000 and then divide it for output
		// better solution than adding more wait() calls
		// and additional key press checks
		let countDown = 1000;

		return;
	}

	/**
	 * Detect level geometry collision and determine whether it's an object that can be destroyed
	 * @param int x
	 * @param int y
	 * @param boolean isShooting
	 */
	method boolean detectLevelCollision(int x, int y, boolean isShooting)
	{
		var int levelItemDetected;
		let levelItemDetected = level.detectCollision(x, y);

		// we only remove destructable items if the player is shooting at it
		if (isShooting) {
			// TODO, potentially replace with generic "breakable" + "shootToBreakCount" 
			if (levelItemDetected = 1) {
				// concrete wall, can be destroyed
				if (player1Turn) {
					do player1.explodeBulletWithSprite(x, y);
				} else {
					do player2.explodeBulletWithSprite(x, y);
				} 
				do level.removeSprite(x, y);
			} 
		}

		return levelItemDetected > 0;
	}

	/**
	 * Game Loop
	 */
	method void run()
	{
		var boolean exit;		
		var int countDownCurrent;
		var int countDownLast;

		// the key currently pressed by the user
	    var char key;  						

		let exit = false;		

		// game loop
		while (~exit) {
			// waits for a key to be pressed
			while (key = 0) {
				let key = Keyboard.keyPressed();
				do Main.wait(10);

				if (countDownStarted) {
					// start off at 1000 and then divide it for output
					// better solution than adding more wait() calls
					// and additional key press checks
					if (countDown = 1000) {
						let countDownCurrent = 0;
						let countDownLast = -1;
						// only need to output this when it just started
						do Output.moveCursor(19, 10);
						do Main.printString("[Q]uit [P]revious [N]ext [R]estart [U]nknown ");
					}

					let countDown = countDown - 1;
					let countDownCurrent = countDown / 100;

					// only update the display if count down value differs
					if (~(countDownCurrent = countDownLast))
					{
						// show countdown timer
						do Output.moveCursor(13, 21);
						do Main.printString("Loading next level in");
						do Output.moveCursor(15, 31);
						do Output.printInt(countDownCurrent);
					}

					let countDownLast = countDownCurrent;

					if (countDown = 0) {
						// countdown reached zero, with no input
						let countDownStarted = false;

						// start next level
						do loadLevel(level.getCurrentLevel() + 1);	
					}
				}		
			}

			if (key = 81) { 								// Q key
				let exit = true; 
			} else { if (key = 80) {						// P key
				// load previous level
				do loadLevel(level.getCurrentLevel() - 1);	
			} else { if (key = 78) {						// N key
				// load next level
				do loadLevel(level.getCurrentLevel() + 1);	
			} else  { if (key = 82) {						// R key
				// load main menu
				do loadLevel(level.getCurrentLevel());			 
			} else { if (key = 85) {						// U key
				// load random level
				do loadLevel(TankMath.random(Main.getWaitTime() / 10, 0, level.getMaxLevels()));
			} else { 
				if (~gameOver) {
					// check if player is currently in a turn
					if (~playerTurnWaiting) {
						// pass key through to player objects
						let newRound = false;

						if (player1Turn) {
							do player1.keyPressed(key);
						} else {
							do player2.keyPressed(key);
						} 

						// check whether player has moves still this turn
						do decrementAndCheckMovesRemaining();
					} else {
						// check that next player acknowledges turn
						if (key = 128) {
							do nextTurn();
						}
					}				
				}
			}}}}

			// key debounce.
			// since this is a turn-based game we don't want the player to hold the keys down
			while (~(key = 0)) {
				do Main.wait(40);
				let key = Keyboard.keyPressed();
			}
		}}

		return;
	}

	/**
	 * Clean up
	 */
	method void dispose()
	{
		do player1.dispose();
		do player2.dispose();
		do level.dispose();

		do Memory.deAlloc(this);
		return;
	}

}